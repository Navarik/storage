import { Dictionary, Logger } from '@navarik/types';
import { CanonicalSchema, SchemaField, ValidationResponse } from '@navarik/core-ddl';
import { AccessControlAdapter, Changelog, SearchIndex, UUID, CanonicalEntity, Observer, SearchOptions, SearchQuery, EntityPatch, State, EntityData, SchemaRegistry } from './types';
export * from './types';
declare type StorageConfig<B extends object, M extends object> = {
    changelog?: Changelog<B, M>;
    index?: SearchIndex<B, M>;
    state?: State<B, M>;
    schemaRegistry?: SchemaRegistry;
    accessControl?: AccessControlAdapter<B, M>;
    logger?: Logger;
    meta?: Dictionary<SchemaField>;
    schema?: Array<CanonicalSchema>;
    data?: Array<EntityData<B, M>>;
    cacheSize?: number;
};
export declare class Storage<BodyType extends object, MetaType extends object> {
    private isInitializing;
    private ddl;
    private metaDdl;
    private accessControl;
    private currentState;
    private searchIndex;
    private changelog;
    private observers;
    private entityFactory;
    private changeEventFactory;
    private transactionManager;
    private logger;
    private healthStats;
    constructor(config?: StorageConfig<BodyType, MetaType>);
    private updateCurrentState;
    private notifyObservers;
    private onChange;
    up(): Promise<void>;
    down(): Promise<void>;
    isHealthy(): Promise<boolean>;
    stats(): Promise<{
        upSince: Date;
        totalChangesProduced: number;
        totalChangesReceived: number;
        totalIdLookups: number;
        totalSearchQueries: number;
        totalProcessingErrors: number;
    }>;
    types(): string[];
    describe(type: string): CanonicalSchema | undefined;
    define(schema: CanonicalSchema): void;
    validate(entity: EntityData<BodyType, MetaType>): ValidationResponse;
    isValid(entity: EntityData<BodyType, MetaType>): boolean;
    get(id: UUID, user?: UUID): Promise<CanonicalEntity<BodyType, MetaType> | undefined>;
    find(query?: SearchQuery, options?: SearchOptions, user?: UUID): Promise<Array<CanonicalEntity<BodyType, MetaType>>>;
    count(query?: SearchQuery, user?: UUID): Promise<number>;
    create(entity: EntityData<BodyType, MetaType>, commitMessage?: string, user?: UUID): Promise<CanonicalEntity<BodyType, MetaType>>;
    update(entity: EntityPatch<BodyType, MetaType>, commitMessage?: string, user?: UUID): Promise<CanonicalEntity<BodyType, MetaType>>;
    delete(id: UUID, commitMessage?: string, user?: UUID): Promise<CanonicalEntity<BodyType, MetaType> | undefined>;
    observe(handler: Observer<BodyType, MetaType>): void;
}
